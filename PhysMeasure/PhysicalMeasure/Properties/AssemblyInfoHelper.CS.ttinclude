<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\KBLExtensions\bin\Release\KBL.Extensions.dll" #>
<#@ import namespace="System" #>
<#+ 
/*
< # @ import namespace="KBL.Extensions" # >
*/

// Get Environment Variable from name or uses the specified default value
// VariableName : Name of Environment Variable to get
// DefaultVariableValue : Value to use if Environment Variable is not defined
String GetVariableStrInt(String VariableName, int DefaultVariableValue)
{
    string VariableValueStr = Environment.GetEnvironmentVariable(VariableName);
    VariableValueStr = VariableValueStr == null ? DefaultVariableValue.ToString() : int.Parse(VariableValueStr).ToString();
    return VariableValueStr;
}

// Round date time to to minute
// dt : DateTime for which to find timespan to
DateTime DateTimeRound(DateTime dt)
{
    // Round to 10 second;
    // DateTime rounded_dt = new DateTime(dt.Year, dt.Month, dt.Day, dt.Hour, dt.Minute, (dt.Second/10) * 10);
    // Round to 10 minute;
    DateTime rounded_dt = new DateTime(dt.Year, dt.Month, dt.Day, dt.Hour, (dt.Minute/10) * 10, 0);

    return rounded_dt;
}


// Get time since 2000-01-01
// dt : DateTime for which to find timespan to
TimeSpan TimeSince_2000_01_01(DateTime dt)
{
    TimeSpan ts = dt - new DateTime(2000, 1, 1);
    return ts;
}

public class AssemplyInfoProperies
{
    public string FileName;
    public string ProjectName;
    public string FolderName; 
    public FileProperties FileProperties;

    public string AssemblyTitle;
    public string AssemblyDescription;

    public string ProductName;

    public AssemplyInfoProperies(
            string fileName, string projectName = "", string folderName = "", FileProperties fileProperties = null,
            string assemblyTitle = "", string assemblyDescription = "", 
            string productName)
    {
        AssemblyTitle = assemblyTitle;
        AssemblyDescription = assemblyDescription;
        ProductName = productName;
    }
}

enum SeparatorLineKind
{
    Start,
    Middel,
    End
}

class AutoGeneratedSourceFileFormattingInfo
{
    public const String NL = "\r\n";

    public readonly String TextFileType;
    public readonly String StartOfLine;
    public readonly String EndOfLine;
    public readonly String StartOfCommentLine;
    public readonly String EndOfCommentLine;
    public readonly String SeparatorCommentLinePattern;
    public readonly String StartOfCommentBlock;
    public readonly String EndOfCommentBlock;
    public readonly Int16  TextBoxWidth;
    public readonly String TextBoxWidthStr;

    public readonly String FormatLineFormat;
    public readonly int BlockCommentLineStrLenAdjust;

    public AutoGeneratedSourceFileFormattingInfo(
        String textFileType = "", // Unknown
        String startOfLine = "",
        String endOfLine = NL,
        String startOfCommentLine = "* ",
        String endOfCommentLine = " *",
        String separatorCommentLinePattern = "-",
        String startOfCommentBlock = "/*",
        String endOfCommentBlock = "*/",
        Int16 textBoxWidth = 100
    )
    {
        TextFileType = textFileType;
        StartOfLine = startOfLine;
        EndOfLine = endOfLine;
        StartOfCommentLine = startOfCommentLine;
        EndOfCommentLine = endOfCommentLine;
        SeparatorCommentLinePattern = separatorCommentLinePattern;
        StartOfCommentBlock = startOfCommentBlock;
        EndOfCommentBlock = endOfCommentBlock;
        TextBoxWidth = textBoxWidth;
        TextBoxWidthStr = TextBoxWidth.ToString();

        FormatLineFormat = "{0,-"+TextBoxWidthStr+"}";

        BlockCommentLineStrLenAdjust = 0;
        if (!StartOfCommentBlock.Contains("\n"))
        {
            BlockCommentLineStrLenAdjust = StartOfCommentBlock.Length - StartOfCommentLine.Length; 
        }
    }

    public virtual String FormatLine(String text)
    { 
        return StartOfLine + String.Format(FormatLineFormat, text) + EndOfLine;
    }

    public virtual String FormatCommentLine(String text = "")
    { 
        // List<String> textparts = KBL.Extensions.StringExtensions.Chop(text, TextBoxWidth);
        List<String> textparts = text.Chop(TextBoxWidth);

        String result = "";
        foreach (string textpart in textparts)
        {
            result += StartOfCommentLine + String.Format(FormatLineFormat, text) + EndOfCommentLine;
        }

        return result;
    }

    public virtual String FormatSeparatorCommentLine(SeparatorLineKind kind = SeparatorLineKind.Middel)
    { 
        
        if (kind != SeparatorLineKind.Middel && BlockCommentLineStrLenAdjust != 0)
        {
            if (kind == SeparatorLineKind.Start)
            {
                return String.Format("".PadRight(TextBoxWidth-BlockCommentLineStrLenAdjust, SeparatorCommentLinePattern[0])) + EndOfCommentLine;
            }
            else
            {
                return StartOfCommentLine + String.Format("".PadRight(TextBoxWidth-BlockCommentLineStrLenAdjust, SeparatorCommentLinePattern[0]));
            }
        }
        else
        {
            return StartOfCommentLine + String.Format("".PadRight(TextBoxWidth, SeparatorCommentLinePattern[0])) + EndOfCommentLine;
        }
    }

    public virtual String FormatStartOfCommentBlock()
    { 
        return StartOfCommentBlock;
    }

    public virtual String FormatEndOfCommentBlock()
    { 
        return EndOfCommentBlock;
    }
}

class CSharpAutoGeneratedSourceFileFormattingInfo : AutoGeneratedSourceFileFormattingInfo
{
    public CSharpAutoGeneratedSourceFileFormattingInfo(
        String startOfLine = "",
        String endOfLine = NL,
        String startOfCommentLine = "*",
        String endOfCommentLine = "*"+NL,
        String separatorCommentLinePattern = "*",
        String startOfCommentBlock = "/*",
        String endOfCommentBlock = "*/",
        Int16 textBoxWidth = 100
    ) : base (
        "C#",
        startOfLine,
        endOfLine,
        startOfCommentLine,
        endOfCommentLine,
        separatorCommentLinePattern,
        startOfCommentBlock,
        endOfCommentBlock,
        textBoxWidth
    )
    {
    }
}

class XMLAutoGeneratedSourceFileFormattingInfo : AutoGeneratedSourceFileFormattingInfo
{
    public XMLAutoGeneratedSourceFileFormattingInfo(
        String startOfLine = "",
        String endOfLine = NL,
        String startOfCommentLine = "*",
        String endOfCommentLine = "*"+NL,
        String separatorCommentLinePattern = "*",
        String startOfCommentBlock = "<!--"+NL,
        String endOfCommentBlock = "-->",
        Int16 textBoxWidth = 100
    ) : base (
        "XML",
        startOfLine,
        endOfLine,
        startOfCommentLine,
        endOfCommentLine,
        separatorCommentLinePattern,
        startOfCommentBlock,
        endOfCommentBlock,
        textBoxWidth
    )
    {
    }
}


static class FormattingInfos {
    public static AutoGeneratedSourceFileFormattingInfo  DefaultFormattingInfo = new AutoGeneratedSourceFileFormattingInfo();
    public static AutoGeneratedSourceFileFormattingInfo  CSharpFormattingInfo = new CSharpAutoGeneratedSourceFileFormattingInfo();
    public static AutoGeneratedSourceFileFormattingInfo  XMLFormattingInfo = new XMLAutoGeneratedSourceFileFormattingInfo();

    /*
    AutoGeneratedSourceFileFormattingInfo[]  formattingInfos = 
    { 
    };
    */ 

    public static AutoGeneratedSourceFileFormattingInfo GetFormattingInfo(String language) 
    {
        AutoGeneratedSourceFileFormattingInfo  currentFormattingInfo = DefaultFormattingInfo;

        if (   language.Equals("C#", StringComparison.InvariantCultureIgnoreCase)
            || language.Equals("cs", StringComparison.InvariantCultureIgnoreCase)
        ) 
        {
            currentFormattingInfo = CSharpFormattingInfo;
        }
        else 
        if (language.Equals("xml", StringComparison.InvariantCultureIgnoreCase)) 
        {
            currentFormattingInfo = XMLFormattingInfo;
        }
    
        return currentFormattingInfo;
    }
}


class AutoGeneratedSourceFileFormattingState
{
    public AutoGeneratedSourceFileFormattingInfo FormattingInfo;
    public int LineNo = 0;
    public int IndentCharCount = 0;

    private Stack<int> charIndents = new Stack<int>();

    public AutoGeneratedSourceFileFormattingState(AutoGeneratedSourceFileFormattingInfo formattingInfo)
    {
        LineNo = 0;
        IndentCharCount = 0;
        FormattingInfo = formattingInfo;
    }

    public AutoGeneratedSourceFileFormattingState(String language)
     : this(FormattingInfos.GetFormattingInfo(language))
    {
    }

    public String IncrementIndent(int noOfChars)
    { 
        IndentCharCount += noOfChars;
        charIndents.Push(noOfChars);
        return "";
    }

    public String DecrementIndent()
    { 
        int noOfChars = charIndents.Pop();
        IndentCharCount -= noOfChars;
        return "";
    }


    public String FormatLine(String text)
    { 
        return FormattingInfo.StartOfLine + "".PadRight(IndentCharCount) + text.PadRight(FormattingInfo.TextBoxWidth - IndentCharCount) + FormattingInfo.EndOfLine;
    }

    public String FormatCommentLine(String text = "")
    { 
        // List<String> textparts =  KBL.Extensions.StringExtensions.Chop(text, FormattingInfo.TextBoxWidth - IndentCharCount - 2);
        List<String> textparts =  text.Chop(FormattingInfo.TextBoxWidth - IndentCharCount - 2);

        String result = "";
        if (textparts.Any())
        {
            foreach (string textpart in textparts)
            {
                string adjustedTextPart; 
                if (textpart[0] == ' ' && textpart[1] != ' ')
                {
                    adjustedTextPart = textpart.Substring(1);
                }
                else 
                {
                    adjustedTextPart = textpart;
                }
                result += FormattingInfo.StartOfCommentLine + " " + "".PadRight(IndentCharCount) + adjustedTextPart.PadRight(FormattingInfo.TextBoxWidth - IndentCharCount - 2) + " "  + FormattingInfo.EndOfCommentLine;
            }
        } 
        else 
        {
            result = FormattingInfo.StartOfCommentLine + "".PadRight(FormattingInfo.TextBoxWidth) + FormattingInfo.EndOfCommentLine;
        }
         
        return result;
    }

    public String FormatSeparatorCommentLine(SeparatorLineKind kind = SeparatorLineKind.Middel)
    { 
        return FormattingInfo.FormatSeparatorCommentLine(kind);
    }

    public String FormatStartOfCommentBlock()
    { 
        return FormattingInfo.FormatStartOfCommentBlock();
    }

    public String FormatEndOfCommentBlock()
    { 
        return FormattingInfo.FormatEndOfCommentBlock();
    }

}


// Get Auto Generated File Header
// language :  Programming language/ file format for which to generate the header.
// toolMessage : Tool version or message to show as part of the generated the header.
String GetAutoGeneratedFileHeader(String language, String toolMessage)
{
    AutoGeneratedSourceFileFormattingState  currentFormattingState = new AutoGeneratedSourceFileFormattingState(language);
    Boolean isXML = currentFormattingState.FormattingInfo.TextFileType.Equals("XML", StringComparison.InvariantCultureIgnoreCase);

    String autoGeneratedFileHeader = 
                   currentFormattingState.FormatStartOfCommentBlock ()
        + (isXML ? currentFormattingState.FormatLine                ("<auto-generated>")  : "")
        +          currentFormattingState.FormatSeparatorCommentLine(SeparatorLineKind.Start)
//        +          currentFormattingState.IncrementIndent(4)
        +          currentFormattingState.FormatCommentLine         ("This code was generated by a tool."                                         )
        +          currentFormattingState.FormatCommentLine         (toolMessage                                                                  )
        +          currentFormattingState.FormatCommentLine         (                                                                             )
        +          currentFormattingState.FormatCommentLine         ("Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.")
//        +          currentFormattingState.DecrementIndent()
        +          currentFormattingState.FormatSeparatorCommentLine(SeparatorLineKind.End)
        + (isXML ? currentFormattingState.FormatLine                ("</auto-generated>")  : "")
        +          currentFormattingState.FormatEndOfCommentBlock   ();

    return autoGeneratedFileHeader;
}

// Get Auto Generated File Header
// language :  Programming language/ file format for which to generate the header.
// toolMessage : Tool version or message to show as part of the generated the header.
String GetAutoGeneratedFileHeader(String language, String sourceFilename, String buildDateStr)
{
    String toolMessage = "Generated " + buildDateStr +" from " + sourceFilename;
    return GetAutoGeneratedFileHeader(language, toolMessage);
}

String GetCopyright(String fromYearStr, String thisYearStr, String developerName)
{
    return "Copyright © "+fromYearStr+"-"+thisYearStr+" "+developerName;
}
#>
