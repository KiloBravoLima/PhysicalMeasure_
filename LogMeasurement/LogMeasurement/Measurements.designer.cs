#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LogMeasurement
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Measurements")]
	public partial class MeasurementsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMeasurement(Measurement_LINQ instance);
    partial void UpdateMeasurement(Measurement_LINQ instance);
    partial void DeleteMeasurement(Measurement_LINQ instance);
    partial void InsertUnit(Unit_LINQ instance);
    partial void UpdateUnit(Unit_LINQ instance);
    partial void DeleteUnit(Unit_LINQ instance);
    partial void InsertInternalError(InternalError_LINQ instance);
    partial void UpdateInternalError(InternalError_LINQ instance);
    partial void DeleteInternalError(InternalError_LINQ instance);
    partial void InsertUnitList(UnitList_LINQ instance);
    partial void UpdateUnitList(UnitList_LINQ instance);
    partial void DeleteUnitList(UnitList_LINQ instance);
    #endregion
		
		public MeasurementsDataContext() : 
				base(global::LogMeasurement.Properties.Settings.Default.MEASUREMENTSConnectionStringNew, mappingSource)
		{
			OnCreated();
		}
		
		public MeasurementsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeasurementsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeasurementsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MeasurementsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Measurement_LINQ> Measurements
		{
			get
			{
				return this.GetTable<Measurement_LINQ>();
			}
		}
		
		public System.Data.Linq.Table<Unit_LINQ> Units
		{
			get
			{
				return this.GetTable<Unit_LINQ>();
			}
		}
		
		public System.Data.Linq.Table<InternalError_LINQ> InternalErrors
		{
			get
			{
				return this.GetTable<InternalError_LINQ>();
			}
		}
		
		public System.Data.Linq.Table<UnitList_LINQ> UnitLists
		{
			get
			{
				return this.GetTable<UnitList_LINQ>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Measurements")]
	public partial class Measurement_LINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ParentMeasurement;
		
		private System.Nullable<System.DateTime> _LogTime;
		
		private System.Nullable<System.DateTime> _EventTime;
		
		private System.Nullable<double> _MeasuredValue;
		
		private System.Nullable<int> _MeasuredUnit;
		
		private EntitySet<Measurement_LINQ> _Measurements;
		
		private EntityRef<Measurement_LINQ> _Measurement2;
		
		private EntityRef<Unit_LINQ> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentMeasurementChanging(System.Nullable<int> value);
    partial void OnParentMeasurementChanged();
    partial void OnLogTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogTimeChanged();
    partial void OnEventTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEventTimeChanged();
    partial void OnMeasuredValueChanging(System.Nullable<double> value);
    partial void OnMeasuredValueChanged();
    partial void OnMeasuredUnitChanging(System.Nullable<int> value);
    partial void OnMeasuredUnitChanged();
    #endregion
		
		public Measurement_LINQ()
		{
			this._Measurements = new EntitySet<Measurement_LINQ>(new Action<Measurement_LINQ>(this.attach_Measurements), new Action<Measurement_LINQ>(this.detach_Measurements));
			this._Measurement2 = default(EntityRef<Measurement_LINQ>);
			this._Unit = default(EntityRef<Unit_LINQ>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentMeasurement", DbType="Int")]
		public System.Nullable<int> ParentMeasurement
		{
			get
			{
				return this._ParentMeasurement;
			}
			set
			{
				if ((this._ParentMeasurement != value))
				{
					if (this._Measurement2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentMeasurementChanging(value);
					this.SendPropertyChanging();
					this._ParentMeasurement = value;
					this.SendPropertyChanged("ParentMeasurement");
					this.OnParentMeasurementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogTime
		{
			get
			{
				return this._LogTime;
			}
			set
			{
				if ((this._LogTime != value))
				{
					this.OnLogTimeChanging(value);
					this.SendPropertyChanging();
					this._LogTime = value;
					this.SendPropertyChanged("LogTime");
					this.OnLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasuredValue", DbType="Float")]
		public System.Nullable<double> MeasuredValue
		{
			get
			{
				return this._MeasuredValue;
			}
			set
			{
				if ((this._MeasuredValue != value))
				{
					this.OnMeasuredValueChanging(value);
					this.SendPropertyChanging();
					this._MeasuredValue = value;
					this.SendPropertyChanged("MeasuredValue");
					this.OnMeasuredValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeasuredUnit", DbType="Int")]
		public System.Nullable<int> MeasuredUnit
		{
			get
			{
				return this._MeasuredUnit;
			}
			set
			{
				if ((this._MeasuredUnit != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeasuredUnitChanging(value);
					this.SendPropertyChanging();
					this._MeasuredUnit = value;
					this.SendPropertyChanged("MeasuredUnit");
					this.OnMeasuredUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measurement_Measurement", Storage="_Measurements", ThisKey="Id", OtherKey="ParentMeasurement")]
		public EntitySet<Measurement_LINQ> Measurements
		{
			get
			{
				return this._Measurements;
			}
			set
			{
				this._Measurements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Measurement_Measurement", Storage="_Measurement2", ThisKey="ParentMeasurement", OtherKey="Id", IsForeignKey=true)]
		public Measurement_LINQ Measurement2
		{
			get
			{
				return this._Measurement2.Entity;
			}
			set
			{
				Measurement_LINQ previousValue = this._Measurement2.Entity;
				if (((previousValue != value) 
							|| (this._Measurement2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Measurement2.Entity = null;
						previousValue.Measurements.Remove(this);
					}
					this._Measurement2.Entity = value;
					if ((value != null))
					{
						value.Measurements.Add(this);
						this._ParentMeasurement = value.Id;
					}
					else
					{
						this._ParentMeasurement = default(Nullable<int>);
					}
					this.SendPropertyChanged("Measurement2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Measurement", Storage="_Unit", ThisKey="MeasuredUnit", OtherKey="Id", IsForeignKey=true)]
		public Unit_LINQ Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit_LINQ previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.Measurements.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.Measurements.Add(this);
						this._MeasuredUnit = value.Id;
					}
					else
					{
						this._MeasuredUnit = default(Nullable<int>);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measurements(Measurement_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Measurement2 = this;
		}
		
		private void detach_Measurements(Measurement_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Measurement2 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Units")]
	public partial class Unit_LINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Symbol;
		
		private System.Data.Linq.Binary _Exponents;
		
		private System.Nullable<double> _ConversionFactor;
		
		private System.Nullable<double> _ConversionOffset;
		
		private EntitySet<Measurement_LINQ> _Measurements;
		
		private EntitySet<UnitList_LINQ> _UnitLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnExponentsChanging(System.Data.Linq.Binary value);
    partial void OnExponentsChanged();
    partial void OnConversionFactorChanging(System.Nullable<double> value);
    partial void OnConversionFactorChanged();
    partial void OnConversionOffsetChanging(System.Nullable<double> value);
    partial void OnConversionOffsetChanged();
    #endregion
		
		public Unit_LINQ()
		{
			this._Measurements = new EntitySet<Measurement_LINQ>(new Action<Measurement_LINQ>(this.attach_Measurements), new Action<Measurement_LINQ>(this.detach_Measurements));
			this._UnitLists = new EntitySet<UnitList_LINQ>(new Action<UnitList_LINQ>(this.attach_UnitLists), new Action<UnitList_LINQ>(this.detach_UnitLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(25)")]
		public override string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="NChar(3)")]
		public override string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Exponents", DbType="VarBinary(7) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public  System.Data.Linq.Binary ExponentsBin
		{
			get
			{
				return this._Exponents;
			}
			set
			{
				if ((this._Exponents != value))
				{
					this.OnExponentsChanging(value);
					this.SendPropertyChanging();
					this._Exponents = value;
					this.SendPropertyChanged("Exponents");
					this.OnExponentsChanged();
				}
			}
		}

        public override SByte[] Exponents
        {
            get
            {
                return (SByte[])(this._Exponents.ToArray().ToSBytes());
            }
            set
            {
                System.Data.Linq.Binary exponentsBinValue = (System.Data.Linq.Binary)value.ToBytes();
                if ((this._Exponents != exponentsBinValue))
                {
                    ExponentsBin = exponentsBinValue;
                }
            }
        }

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionFactor", DbType="Float")]
		public override System.Nullable<double> ConversionFactor
		{
			get
			{
				return this._ConversionFactor;
			}
			set
			{
				if ((this._ConversionFactor != value))
				{
					this.OnConversionFactorChanging(value);
					this.SendPropertyChanging();
					this._ConversionFactor = value;
					this.SendPropertyChanged("ConversionFactor");
					this.OnConversionFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionOffset", DbType="Float")]
		public override System.Nullable<double> ConversionOffset
		{
			get
			{
				return this._ConversionOffset;
			}
			set
			{
				if ((this._ConversionOffset != value))
				{
					this.OnConversionOffsetChanging(value);
					this.SendPropertyChanging();
					this._ConversionOffset = value;
					this.SendPropertyChanged("ConversionOffset");
					this.OnConversionOffsetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_Measurement", Storage="_Measurements", ThisKey="Id", OtherKey="MeasuredUnit")]
		public EntitySet<Measurement_LINQ> Measurements
		{
			get
			{
				return this._Measurements;
			}
			set
			{
				this._Measurements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_UnitList", Storage="_UnitLists", ThisKey="Id", OtherKey="UnitId")]
		public EntitySet<UnitList_LINQ> UnitLists
		{
			get
			{
				return this._UnitLists;
			}
			set
			{
				this._UnitLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Measurements(Measurement_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_Measurements(Measurement_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
		
		private void attach_UnitLists(UnitList_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Unit = this;
		}
		
		private void detach_UnitLists(UnitList_LINQ entity)
		{
			this.SendPropertyChanging();
			entity.Unit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InternalErrors")]
	public partial class InternalError_LINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<System.DateTime> _LogTime;
		
		private System.Nullable<System.DateTime> _EventTime;
		
		private string _ErrorMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLogTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogTimeChanged();
    partial void OnEventTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEventTimeChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public InternalError_LINQ()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LogTime
		{
			get
			{
				return this._LogTime;
			}
			set
			{
				if ((this._LogTime != value))
				{
					this.OnLogTimeChanging(value);
					this.SendPropertyChanging();
					this._LogTime = value;
					this.SendPropertyChanged("LogTime");
					this.OnLogTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="NVarChar(MAX)")]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitLists")]
	public partial class UnitList_LINQ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UnitId;
		
		private int _ListId;
		
		private EntityRef<Unit_LINQ> _Unit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUnitIdChanging(int value);
    partial void OnUnitIdChanged();
    partial void OnListIdChanging(int value);
    partial void OnListIdChanged();
    #endregion
		
		public UnitList_LINQ()
		{
			this._Unit = default(EntityRef<Unit_LINQ>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public override int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitId", DbType="Int NOT NULL")]
		public int UnitId
		{
			get
			{
				return this._UnitId;
			}
			set
			{
				if ((this._UnitId != value))
				{
					if (this._Unit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitIdChanging(value);
					this.SendPropertyChanging();
					this._UnitId = value;
					this.SendPropertyChanged("UnitId");
					this.OnUnitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ListId", DbType="Int NOT NULL")]
		public int ListId
		{
			get
			{
				return this._ListId;
			}
			set
			{
				if ((this._ListId != value))
				{
					this.OnListIdChanging(value);
					this.SendPropertyChanging();
					this._ListId = value;
					this.SendPropertyChanged("ListId");
					this.OnListIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unit_UnitList", Storage="_Unit", ThisKey="UnitId", OtherKey="Id", IsForeignKey=true)]
		public Unit_LINQ Unit
		{
			get
			{
				return this._Unit.Entity;
			}
			set
			{
				Unit_LINQ previousValue = this._Unit.Entity;
				if (((previousValue != value) 
							|| (this._Unit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unit.Entity = null;
						previousValue.UnitLists.Remove(this);
					}
					this._Unit.Entity = value;
					if ((value != null))
					{
						value.UnitLists.Add(this);
						this._UnitId = value.Id;
					}
					else
					{
						this._UnitId = default(int);
					}
					this.SendPropertyChanged("Unit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
